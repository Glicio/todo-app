// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Team {
    id              String     @id @default(cuid())
    name            String
    //counters
    todosCount      Int        @default(0)
    categoriesCount Int        @default(0)
    //timestamps
    createdAt       DateTime   @default(now())
    updatedAt       DateTime?
    image           String?
    color           String?
    owner           User       @relation(name: "teamsCreated", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId         String
    todos           Todo[]
    categories      Category[]
    users           User[]

    TeamInvitation TeamInvitation[] @relation("Invites")

    @@index([ownerId])
}

model TeamInvitation {
    id          String    @id @default(cuid())
    email       String?
    teamId      String
    team        Team      @relation("Invites", fields: [teamId], references: [id], onDelete: Cascade)
    accepted    Boolean   @default(false)
    invitedBy   User      @relation("invitationsCreated", fields: [invitedById], references: [id], onDelete: Cascade)
    invitedById String
    acceptedAt  DateTime?
    createdAt   DateTime  @default(now())
    expiresAt   DateTime?

    @@index([teamId])
    @@index([invitedById])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Todo {
    id          String    @id @default(cuid())
    //content
    title       String
    description String?   @db.Text
    done        Boolean   @default(false)
    dueDate     DateTime?
    //timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
    doneAt      DateTime?
    //relationships
    //todos can be owned by a user or a team
    user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?
    //but is always created by a user
    createdBy   User      @relation("todoCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    updatedBy   User?     @relation("todoUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
    updatedById String?
    doneBy      User?     @relation("todoDoneBy", fields: [doneById], references: [id], onDelete: Cascade)
    doneById    String?

    categories Category[]

    teamId String?
    team   Team?   @relation(fields: [teamId], references: [id])

    assignedTo User[] @relation("todosAssigned")

    //indexes
    @@index([doneById])
    @@index([updatedById])
    @@index([createdById])
    @@index([teamId])
    @@index([userId])
}

model Category {
    id          String    @id @default(cuid())
    name        String
    description String?
    color       String?
    //timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
    //relationships
    createdBy   User      @relation("categoriesCreated", fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    updatedBy   User?     @relation("categoriesUpdated", fields: [updatedById], references: [id], onDelete: Cascade)
    updatedById String?
    team        Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId      String?
    user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?
    todos       Todo[]

    //indexes
    @@index([updatedById])
    @@index([createdById])
    @@index([teamId])
    @@index([userId])
}

model User {
    id                     String    @id @default(cuid())
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    //counters
    todosCreatedCount      Int       @default(0)
    teamsCreatedCount      Int       @default(0)
    categoriesCreatedCount Int       @default(0)

    //relationships
    teams        Team[]
    teamsCreated Team[] @relation("teamsCreated")

    accounts Account[]
    sessions Session[]

    categoriesCreated Category[] @relation("categoriesCreated")
    categoriesUpdated Category[] @relation("categoriesUpdated")
    categories        Category[]

    todos         Todo[]
    todosDone     Todo[] @relation("todoDoneBy")
    todosCreated  Todo[] @relation("todoCreatedBy")
    todosUpdated  Todo[] @relation("todoUpdatedBy")
    todosAssigned Todo[] @relation("todosAssigned")

    TeamInvitation TeamInvitation[] @relation("invitationsCreated")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
